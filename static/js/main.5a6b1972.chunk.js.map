{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAGaA,G,kBAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACNC,IAAI,YAEN,oBAAIJ,UAAU,eAAd,SACKD,EAAMG,QAAQG,OAEnB,4BACKN,EAAMG,QAAQI,aCChBC,EAVE,SAAAR,GACb,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAK,SAAAP,GAAO,OACxB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLtBO,G,MAAY,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,aACpC,OACI,8BACI,uBACIC,KAAK,QACLF,YAAaA,EACbG,SAAUF,EACVZ,UAAU,eCqCXe,E,kDAxCb,aAAc,IAAD,8BACX,gBAcFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALJ,E,gEASO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAOjC,IAAD,EAC0BC,KAAKN,MAA9Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACXU,EAAmBpB,EAASqB,QAC/B,SAAA3B,GAAO,OAAIA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAE9D,OACA,sBAAK9B,UAAU,MAAf,UACE,gDAEA,cAAC,EAAD,CACEW,YAAY,aACZC,aAAce,KAAKf,eAGrB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAlCRI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5a6b1972.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./card.style.css\"\n\nexport const Card = (props) => {\n    return(\n        <div className=\"card-container\">\n            <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} \n              alt=\"monster\"\n            />\n            <h1 className=\"card-heading\">\n                {props.monster.name}\n            </h1>\n            <p>\n                {props.monster.email}\n            </p>\n        </div>\n    )\n}","import React from \"react\"\nimport \"./card-list.styles.css\"\nimport {Card} from \"../card/card.component\"\n\nconst CardList = props => {\n    return(\n        <div className=\"card-list\">\n            {props.monsters.map( monster => (\n                <Card key={monster.id} monster={monster} />\n            ))}\n        </div>\n    ) \n}\n\nexport default CardList","import React from \"react\"\nimport \"./search-box.style.css\"\n\nexport const SearchBox = ({placeholder, handleChange}) =>{\n    return(\n        <div>\n            <input \n                type=\"input\"\n                placeholder={placeholder}\n                onChange={handleChange}\n                className=\"search\"\n            />\n        </div>\n    )\n}","import React, {Component} from \"react\"\n\nimport './App.css';\nimport CardList from \"./components/card-list/card-list.component.jsx\"\nimport {SearchBox} from \"./components/search-box/search-box.component.jsx\"\n\nclass App extends Component{\n  constructor(){\n    super()\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n    \n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render(){\n    const {monsters, searchField} = this.state\n    const filteredMonsters = monsters.filter(\n       monster => monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    return(\n    <div className=\"App\">\n      <h1>Monster Search</h1>\n      \n      <SearchBox \n        placeholder='search box'\n        handleChange={this.handleChange}\n      />\n\n      <CardList monsters={filteredMonsters} /> \n\n    </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}